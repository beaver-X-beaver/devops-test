---
###
### I am using the Rust Lang official CI as inspiration for this workflow
### https://github.com/rust-lang/rust/blob/master/.github/workflows/ci.yml
###
name: Main CI - Rust
on:
  push:
    branches: main
env:
  CARGO_TERM_COLOR: always
  # CARGO_HOME:
  # RUSTFLAGS: 

defaults:
  run:
    shell: bash

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code 
        uses: actions/checkout@v2
      - name: Add clippy component to rustup
        run: rustup component add clippy
      - name: Execute linting process
        uses: actions-rs/clippy-check@v1
        # Last step can be hard coded as a "run" statement
        # But this module provides more interesting functionality
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
  build:
    needs: lint
    strategy:
      matrix:
        include:
          - name: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            # If needed, same for the other env dicts
            env: {}
          - name: x86-64-pc-windows-msvc
            os: windows-latest
            env: {}
          - name: x86_64-apple-darwin
            os: macos-latest
            env: {}
    runs-on: "${{ matrix.os }}"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Dump toolchain target
        run: rustup target list | grep installed
#     - name: Install sccache to share dependency caches
#       run: cargo install sccache && export RUSTC_WRAPPER=sccache
#     
#       THIS STEP IS NOT NEEDED AS THE WORKPLACE DOES NOT SHARE DEPENDENCIES
#       BETWEEN LIBS 1,2 AND 3. HOWEVER, THIS STEP WOULD SAVE US SOME TIME FOR
#       A LARGER RUST LANG PRODUCT
      - name: Build
        run: cargo build --release
        env: ${{ matrix.env }}
      - name: Test
        run: cargo test
#     - name: Cache dependecies
#       uses: actions/cache@v2
#       with:
#         path: |
#           ~/.cargo/registry
#         key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}
#         restore-keys: ${{ runner.os }}-
#        
#        THIS STEP IS NOT NEEDED AS THE PROJECT IS A SIMPLE SOURCE CODE
#        AND THERE ARE NO EXTERNAL PACKAGES NEEDED AS DEPENDENCIES. HOWEVER,
#        THIS STEP WOULD SAVE US SOME TIME IN FOR A LARGER PRODUCT
#          
#
#  publish:
#    needs: build
