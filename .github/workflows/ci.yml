---
###
### I am using the Rust Lang official CI as inspiration for this workflow
### https://github.com/rust-lang/rust/blob/master/.github/workflows/ci.yml
###
name: Main CI - Rust
on:
  push:
    branches: main
env:
  CARGO_TERM_COLOR: always
  # CARGO_HOME:
  # RUSTFLAGS: 

defaults:
  run:
    shell: bash

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code 
        uses: actions/checkout@v2
      - name: Add clippy component to rustup
        run: rustup component add clippy
      - name: Execute linting process
        uses: actions-rs/clippy-check@v1
        # Last step can be hard coded as a "run" statement
        # But this module provides more interesting functionality
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
  build:
    needs: lint
    strategy:
      matrix:
        include:
          - name: x86_64-unknown-linux-gnu
            os: ubuntu-latest-x1
            # If needed, same for the other env dicts
            env: {}
          - name: x86-64-pc-windows-gnu
            os: windows-latest-x1
            env: {}
          - name: x86_64-apple-darwin
            os: macos-latest
            env: {}
    runs-on: "${{ matrix.os }}"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Dump toolchain target
        run: rustup toolchain list | grep installed
      - name: Build
        run: cargo build
      - name: Test
        run: cargo test
#
#  publish:
#    needs: build
